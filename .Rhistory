theme(axis.title.y = element_text(color = "#2F4F4F",face = "bold",size = 15))
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot of Positive and negative weight in all cohort",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 15,width = 30,units ="cm",res=150)
print(p)
dev.off()
####violin plot for all signature and all cohort ####
empty <- data.frame()  #concat all dataset together
datasets <- colnames(input_LFC_genesignature)
for(i in seq(1, dim(input_LFC_genesignature)[2])){
Value = input_LFC_genesignature[,i]
Dataset = rep(datasets[i],dim(input_LFC_genesignature)[1])
dataframe_i <- data.frame(Value,Dataset)
empty <- rbind(empty, dataframe_i)
print(dim(empty))
}
empty <- empty[!is.na(empty$Value),]
empty$Dataset <- gsub("_LFC","",empty$Dataset)
p <- ggviolin(empty, x = "Dataset", y = "Value", fill = "Dataset",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"),
xlab = "Cohort",
ylab = "LFC_value",
title = "Gene signature in all datasets") +
theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5,color = "#2F4F4F")) +
theme(axis.text.x.bottom = element_text(size = 7,face = "bold")) +
theme(axis.text.x.bottom = element_text(angle = 90,hjust=1)) +
#scale_x_discrete(position = "") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(nrow = 3,byrow = T)) +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 5,face = "bold")) +
theme(axis.title.x = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.title.y = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.text.x = element_text(face = "bold",size = 20)) +
theme(legend.position = "none")
show(p)
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot_for_allgenes_allcohort",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 15,width = 30,units ="cm",res=150)
print(p)
dev.off()
p <- ggviolin(empty, x = "Dataset", y = "Value", fill = "Dataset",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"),
xlab = "Cohort",
ylab = "LFC_value",
title = "Gene signature in all datasets") +
theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5,color = "#2F4F4F")) +
theme(axis.text.x.bottom = element_text(size = 7,face = "bold")) +
theme(axis.text.x.bottom = element_text(angle = 90,hjust=1)) +
#scale_x_discrete(position = "") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(nrow = 3,byrow = T)) +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 5,face = "bold")) +
theme(axis.title.x = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.title.y = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.text.x = element_text(face = "bold",size = 20)) +
theme(legend.position = "none")
show(p)
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot_for_allgenes_allcohort",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 15,width = 30,units ="cm",res=150)
print(p)
dev.off()
library(dplyr)
library(stringi)
library(stringr)
library(tibble)
library(crisprvarified)
library(MAGeCKFlute)
#gene list
basic_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/data/"
gene_list = read.table(paste(basic_path,"DGElist_zexian.txt",sep = "/"))
gene_list = gene_list[!duplicated(gene_list$V1),]
input_meta = read.table(paste(basic_path,"QC_meta.txt",sep = "/"),header = T)
input_LFC = read.table(paste(basic_path,"LFC_maxscale.txt",sep = "/"))
input_LFC_genesignature <- input_LFC %>% filter(rownames(input_LFC) %in% as.vector(gene_list$V1))
####not split and search for top10 and bottom10 ####
input_LFC_genesignature <- input_LFC_genesignature[rowMeans(is.na(input_LFC_genesignature)) <= 0.5,]
#make names consistent
input_meta <- input_meta[order(input_meta$KO_type,input_meta$Treatment_type),]
input_LFC_genesignature <- input_LFC_genesignature[,input_meta$file_name_all]
LFC_means <- rowMeans(input_LFC_genesignature,na.rm = T)
cutoff_value = 10
Top10 <- names(LFC_means)[order(LFC_means,decreasing = T)[1:cutoff_value]]
Bottom10 <- names(LFC_means)[order(LFC_means,decreasing = F)[1:cutoff_value]]
##heatmap for top10 and bottom10####
LFC_choose <- input_LFC_genesignature[c(Top10,Bottom10),]
annotation_col <- data.frame(Genelist = c(rep("Top10",10),rep("Bottom10",10)))
rownames(annotation_col) <- c(Top10,Bottom10)
annotation_row <- data.frame(Treatment_Type=input_meta$Treatment_type,KO_type = input_meta$KO_type)
rownames(annotation_row) <- colnames(LFC_choose)
LFC_choose <- LFC_choose[!rowSums(is.na(LFC_choose)) == dim(LFC_choose)[1],]
HeatmapView(t(LFC_choose), limit = c(-8,8), cluster_row = F, cluster_col = TRUE,
filename = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/heatmap/heatmap_for_top10_and_bottom.png", width = 12, height = 8,
annotation_col = annotation_col,annotation_row = annotation_row)
####violin plot for all signature and all cohort ####
empty <- data.frame()  #concat all dataset together
datasets <- colnames(input_LFC_genesignature)
for(i in seq(1, dim(input_LFC_genesignature)[2])){
Value = input_LFC_genesignature[,i]
Dataset = rep(datasets[i],dim(input_LFC_genesignature)[1])
dataframe_i <- data.frame(Value,Dataset)
empty <- rbind(empty, dataframe_i)
print(dim(empty))
}
empty <- empty[!is.na(empty$Value),]
empty$Dataset <- gsub("_LFC","",empty$Dataset)
p <- ggviolin(empty, x = "Dataset", y = "Value", fill = "Dataset",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"),
xlab = "Cohort",
ylab = "LFC_value",
title = "Gene signature in all datasets") +
theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5,color = "#2F4F4F")) +
theme(axis.text.x.bottom = element_text(size = 7,face = "bold")) +
theme(axis.text.x.bottom = element_text(angle = 90,hjust=1)) +
#scale_x_discrete(position = "") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(nrow = 3,byrow = T)) +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 5,face = "bold")) +
theme(axis.title.x = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.title.y = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.text.x = element_text(face = "bold",size = 20)) +
theme(legend.position = "none")
show(p)
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot_for_allgenes_allcohort",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 15,width = 30,units ="cm",res=150)
print(p)
dev.off()
library(dplyr)
library(stringi)
library(stringr)
library(tibble)
library(crisprvarified)
library(MAGeCKFlute)
####draw boxplot/violin, just for one gene, comparisons for Tumors and Immunecell_KO:####
library(tibble)
require(ggpubr)
rownames(LFC_choose)
LFC <- as.numeric(LFC_choose[1,])
df <- data.frame(LFC = LFC, KO_type =input_meta$KO_type)
my_comparisons <- list (c("Tumor_KO","Immunecell_KO"))
p <- ggviolin(df, x = "KO_type", y = "LFC", fill = "KO_type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"),
title = "STAT1")+
stat_compare_means(comparisons = my_comparisons, label = "p.signif") # Add significance levels
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot_for_STAT1",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 12,width = 17,units ="cm",res=150)
print(p)
dev.off()
####violin plot for all signature and all cohort ####
empty <- data.frame()  #concat all dataset together
datasets <- colnames(input_LFC_genesignature)
for(i in seq(1, dim(input_LFC_genesignature)[2])){
Value = input_LFC_genesignature[,i]
Dataset = rep(datasets[i],dim(input_LFC_genesignature)[1])
dataframe_i <- data.frame(Value,Dataset)
empty <- rbind(empty, dataframe_i)
print(dim(empty))
}
empty <- empty[!is.na(empty$Value),]
empty$Dataset <- gsub("_LFC","",empty$Dataset)
p <- ggviolin(empty, x = "Dataset", y = "Value", fill = "Dataset",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"),
xlab = "Cohort",
ylab = "LFC_value",
title = "Gene signature in all datasets") +
theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5,color = "#2F4F4F")) +
theme(axis.text.x.bottom = element_text(size = 7,face = "bold")) +
theme(axis.text.x.bottom = element_text(angle = 90,hjust=1)) +
#scale_x_discrete(position = "") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(nrow = 3,byrow = T)) +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 5,face = "bold")) +
theme(axis.title.x = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.title.y = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.text.x = element_text(face = "bold",size = 20)) +
theme(legend.position = "none")
show(p)
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot_for_allgenes_allcohort",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 15,width = 30,units ="cm",res=150)
print(p)
dev.off()
###violin plot for postive and negtive genes####
gene_list$logical <- "postive weight"
gene_list$logical[gene_list$V2 <= 0] <- "negative weight"
rownames(input_LFC_genesignature) <- rownames(input_LFC)[rownames(input_LFC) %in% as.vector(gene_list$V1)]
input_LFC_genesignature <- add_column(input_LFC_genesignature,gene_name=rownames(input_LFC_genesignature),.before="Burr_PD_L1_CMTM6_INFr_LFC")
gene_signature <- merge(gene_list,input_LFC_genesignature,by.x = "V1",by.y = "gene_name")
empty <- data.frame()  #concat all dataset together
for(i in seq(4, dim(gene_signature)[2])){
Value = gene_signature[,i]
sample_name = rep(colnames(gene_signature)[i],dim(gene_signature)[1])
logical_data = gene_signature$logical
dataframe_i <- data.frame(Value,sample_name,logical_data)
empty <- rbind(empty, dataframe_i)
print(dim(empty))
}
#df <- data.frame(LFC = LFC, KO_type =input_meta$KO_type)
my_comparisons <- list (c("postive weight","negative weight"))
empty <- empty[!is.na(empty$Value),]
p <- ggviolin(empty, x = "sample_name", y = "Value", fill = "logical_data",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "logical_data"),
title = "Positive and negative weight in all datasets",
xlab = "Cohort", ylab = "LFC_Value")+
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +# Add significance levels
theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5,color = "#2F4F4F")) +
theme(axis.text.x.bottom = element_text(size = 7,face = "bold")) +
theme(axis.text.x.bottom = element_text(angle = 90,hjust=1)) +
#scale_x_discrete(position = "") +
theme(legend.position = "right") +
guides(fill = guide_legend(nrow = 3,byrow = T)) +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 10,face = "bold")) +
theme(axis.title.x = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.title.y = element_text(color = "#2F4F4F",face = "bold",size = 15))
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot of Positive and negative weight in all cohort",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 15,width = 30,units ="cm",res=150)
print(p)
dev.off()
####violin plot for postive and negtive genes####
gene_list$logical <- "postive weight"
gene_list$logical[gene_list$V2 <= 0] <- "negative weight"
rownames(input_LFC_genesignature) <- rownames(input_LFC)[rownames(input_LFC) %in% as.vector(gene_list$V1)]
input_LFC_genesignature <- add_column(input_LFC_genesignature,gene_name=rownames(input_LFC_genesignature),.before="Burr_PD_L1_CMTM6_INFr_LFC")
library(dplyr)
library(stringi)
library(stringr)
library(tibble)
library(crisprvarified)
library(MAGeCKFlute)
#gene list
basic_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/data/"
gene_list = read.table(paste(basic_path,"DGElist_zexian.txt",sep = "/"))
gene_list = gene_list[!duplicated(gene_list$V1),]
input_meta = read.table(paste(basic_path,"QC_meta.txt",sep = "/"),header = T)
input_LFC = read.table(paste(basic_path,"LFC_maxscale.txt",sep = "/"))
input_LFC_genesignature <- input_LFC %>% filter(rownames(input_LFC) %in% as.vector(gene_list$V1))
rownames(input_LFC_genesignature)
#gene list
basic_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/data/"
gene_list = read.table(paste(basic_path,"DGElist_zexian.txt",sep = "/"))
gene_list = gene_list[!duplicated(gene_list$V1),]
input_meta = read.table(paste(basic_path,"QC_meta.txt",sep = "/"),header = T)
input_LFC = read.table(paste(basic_path,"LFC_maxscale.txt",sep = "/"))
rownames(input_LFC)
rownames(input_LFC)
####violin plot for postive and negtive genes####
gene_list$logical <- "postive weight"
gene_list$logical[gene_list$V2 <= 0] <- "negative weight"
rownames(input_LFC_genesignature) <- rownames(input_LFC)[rownames(input_LFC) %in% as.vector(gene_list$V1)]
View(input_LFC_genesignature)
input_LFC_genesignature <- add_column(input_LFC_genesignature,gene_name=rownames(input_LFC_genesignature),.before="Burr_PD_L1_CMTM6_INFr_LFC")
gene_signature <- merge(gene_list,input_LFC_genesignature,by.x = "V1",by.y = "gene_name")
empty <- data.frame()  #concat all dataset together
View(gene_signature)
empty <- data.frame()  #concat all dataset together
for(i in seq(4, dim(gene_signature)[2])){
Value = gene_signature[,i]
sample_name = rep(colnames(gene_signature)[i],dim(gene_signature)[1])
logical_data = gene_signature$logical
dataframe_i <- data.frame(Value,sample_name,logical_data)
empty <- rbind(empty, dataframe_i)
print(dim(empty))
}
#df <- data.frame(LFC = LFC, KO_type =input_meta$KO_type)
my_comparisons <- list (c("postive weight","negative weight"))
empty <- empty[!is.na(empty$Value),]
p <- ggviolin(empty, x = "sample_name", y = "Value", fill = "logical_data",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "logical_data"),
title = "Positive and negative weight in all datasets",
xlab = "Cohort", ylab = "LFC_Value")+
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +# Add significance levels
theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5,color = "#2F4F4F")) +
theme(axis.text.x.bottom = element_text(size = 7,face = "bold")) +
theme(axis.text.x.bottom = element_text(angle = 90,hjust=1)) +
#scale_x_discrete(position = "") +
theme(legend.position = "right") +
guides(fill = guide_legend(nrow = 3,byrow = T)) +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 10,face = "bold")) +
theme(axis.title.x = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.title.y = element_text(color = "#2F4F4F",face = "bold",size = 15))
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot of Positive and negative weight in all cohort",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 15,width = 30,units ="cm",res=150)
print(p)
dev.off()
####violin plot for all signature and all cohort ####
empty <- data.frame()  #concat all dataset together
datasets <- colnames(input_LFC_genesignature)
for(i in seq(1, dim(input_LFC_genesignature)[2])){
Value = input_LFC_genesignature[,i]
Dataset = rep(datasets[i],dim(input_LFC_genesignature)[1])
dataframe_i <- data.frame(Value,Dataset)
empty <- rbind(empty, dataframe_i)
print(dim(empty))
}
empty <- empty[!is.na(empty$Value),]
empty$Dataset <- gsub("_LFC","",empty$Dataset)
p <- ggviolin(empty, x = "Dataset", y = "Value", fill = "Dataset",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"),
xlab = "Datasets",
ylab = "LFC_value",
title = "Gene signature in all datasets") +
theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5,color = "#2F4F4F")) +
theme(axis.text.x.bottom = element_text(size = 7,face = "bold")) +
theme(axis.text.x.bottom = element_text(angle = 90,hjust=1)) +
#scale_x_discrete(position = "") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(nrow = 3,byrow = T)) +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 5,face = "bold")) +
theme(axis.title.x = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.title.y = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.text.x = element_text(face = "bold",size = 20)) +
theme(legend.position = "none")
show(p)
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot_for_allgenes_allcohort",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 15,width = 30,units ="cm",res=150)
print(p)
dev.off()
library(dplyr)
library(stringi)
library(stringr)
library(tibble)
library(crisprvarified)
library(MAGeCKFlute)
#gene list
basic_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/data/"
gene_list = read.table(paste(basic_path,"DGElist_zexian.txt",sep = "/"))
gene_list = gene_list[!duplicated(gene_list$V1),]
input_meta = read.table(paste(basic_path,"QC_meta.txt",sep = "/"),header = T)
input_LFC = read.table(paste(basic_path,"LFC_maxscale.txt",sep = "/"))
input_LFC_genesignature <- input_LFC %>% filter(rownames(input_LFC) %in% as.vector(gene_list$V1))
####not split and search for top10 and bottom10 ####
input_LFC_genesignature <- input_LFC_genesignature[rowMeans(is.na(input_LFC_genesignature)) <= 0.5,]
#make names consistent
input_meta <- input_meta[order(input_meta$KO_type,input_meta$Treatment_type),]
input_LFC_genesignature <- input_LFC_genesignature[,input_meta$file_name_all]
LFC_means <- rowMeans(input_LFC_genesignature,na.rm = T)
cutoff_value = 10
Top10 <- names(LFC_means)[order(LFC_means,decreasing = T)[1:cutoff_value]]
Bottom10 <- names(LFC_means)[order(LFC_means,decreasing = F)[1:cutoff_value]]
##heatmap for top10 and bottom10####
LFC_choose <- input_LFC_genesignature[c(Top10,Bottom10),]
annotation_col <- data.frame(Genelist = c(rep("Top10",10),rep("Bottom10",10)))
rownames(annotation_col) <- c(Top10,Bottom10)
annotation_row <- data.frame(Treatment_Type=input_meta$Treatment_type,KO_type = input_meta$KO_type)
rownames(annotation_row) <- colnames(LFC_choose)
LFC_choose <- LFC_choose[!rowSums(is.na(LFC_choose)) == dim(LFC_choose)[1],]
HeatmapView(t(LFC_choose), limit = c(-8,8), cluster_row = F, cluster_col = TRUE,
filename = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/heatmap/heatmap_for_top10_and_bottom.png", width = 12, height = 8,
annotation_col = annotation_col,annotation_row = annotation_row)
library(tibble)
require(ggpubr)
rownames(LFC_choose)
LFC <- as.numeric(LFC_choose[1,])
df <- data.frame(LFC = LFC, KO_type =input_meta$KO_type)
my_comparisons <- list (c("Tumor_KO","Immunecell_KO"))
p <- ggviolin(df, x = "KO_type", y = "LFC", fill = "KO_type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"),
title = "STAT1")+
stat_compare_means(comparisons = my_comparisons, label = "p.signif") # Add significance levels
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot_for_STAT1",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 12,width = 17,units ="cm",res=150)
print(p)
dev.off()
####violin plot for all signature and all cohort ####
empty <- data.frame()  #concat all dataset together
datasets <- colnames(input_LFC_genesignature)
for(i in seq(1, dim(input_LFC_genesignature)[2])){
Value = input_LFC_genesignature[,i]
Dataset = rep(datasets[i],dim(input_LFC_genesignature)[1])
dataframe_i <- data.frame(Value,Dataset)
empty <- rbind(empty, dataframe_i)
print(dim(empty))
}
empty <- empty[!is.na(empty$Value),]
empty$Dataset <- gsub("_LFC","",empty$Dataset)
p <- ggviolin(empty, x = "Dataset", y = "Value", fill = "Dataset",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "white"),
xlab = "Datasets",
ylab = "LFC_value",
title = "Gene signature in all datasets") +
theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5,color = "#2F4F4F")) +
theme(axis.text.x.bottom = element_text(size = 7,face = "bold")) +
theme(axis.text.x.bottom = element_text(angle = 90,hjust=1)) +
#scale_x_discrete(position = "") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(nrow = 3,byrow = T)) +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 5,face = "bold")) +
theme(axis.title.x = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.title.y = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.text.x = element_text(face = "bold",size = 20)) +
theme(legend.position = "none")
show(p)
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot_for_allgenes_allcohort",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 15,width = 30,units ="cm",res=150)
print(p)
dev.off()
####violin plot for postive and negtive genes####
gene_list$logical <- "postive weight"
gene_list$logical[gene_list$V2 <= 0] <- "negative weight"
rownames(input_LFC_genesignature) <- rownames(input_LFC)[rownames(input_LFC) %in% as.vector(gene_list$V1)]
input_LFC_genesignature <- add_column(input_LFC_genesignature,gene_name=rownames(input_LFC_genesignature),.before="Burr_PD_L1_CMTM6_INFr_LFC")
gene_signature <- merge(gene_list,input_LFC_genesignature,by.x = "V1",by.y = "gene_name")
empty <- data.frame()  #concat all dataset together
for(i in seq(4, dim(gene_signature)[2])){
Value = gene_signature[,i]
sample_name = rep(colnames(gene_signature)[i],dim(gene_signature)[1])
logical_data = gene_signature$logical
dataframe_i <- data.frame(Value,sample_name,logical_data)
empty <- rbind(empty, dataframe_i)
print(dim(empty))
}
#df <- data.frame(LFC = LFC, KO_type =input_meta$KO_type)
my_comparisons <- list (c("postive weight","negative weight"))
empty <- empty[!is.na(empty$Value),]
p <- ggviolin(empty, x = "sample_name", y = "Value", fill = "logical_data",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "logical_data"),
title = "Positive and negative weight in all datasets",
xlab = "Datasets", ylab = "LFC_Value")+
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +# Add significance levels
theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5,color = "#2F4F4F")) +
theme(axis.text.x.bottom = element_text(size = 7,face = "bold")) +
theme(axis.text.x.bottom = element_text(angle = 90,hjust=1)) +
#scale_x_discrete(position = "") +
theme(legend.position = "right") +
guides(fill = guide_legend(nrow = 3,byrow = T)) +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 10,face = "bold")) +
theme(axis.title.x = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.title.y = element_text(color = "#2F4F4F",face = "bold",size = 15))
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot of Positive and negative weight in all cohort",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 15,width = 30,units ="cm",res=150)
print(p)
dev.off()
library(dplyr)
library(stringi)
library(stringr)
library(tibble)
library(crisprvarified)
library(MAGeCKFlute)
#gene list
basic_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/data/"
gene_list = read.table(paste(basic_path,"DGElist_zexian.txt",sep = "/"))
gene_list = gene_list[!duplicated(gene_list$V1),]
input_meta = read.table(paste(basic_path,"QC_meta.txt",sep = "/"),header = T)
input_LFC = read.table(paste(basic_path,"LFC_maxscale.txt",sep = "/"))
input_LFC_genesignature <- input_LFC %>% filter(rownames(input_LFC) %in% as.vector(gene_list$V1))
####violin plot for postive and negtive genes####
gene_list$logical <- "postive weight"
gene_list$logical[gene_list$V2 <= 0] <- "negative weight"
rownames(input_LFC_genesignature) <- rownames(input_LFC)[rownames(input_LFC) %in% as.vector(gene_list$V1)]
input_LFC_genesignature <- add_column(input_LFC_genesignature,gene_name=rownames(input_LFC_genesignature),.before="Burr_PD_L1_CMTM6_INFr_LFC")
gene_signature <- merge(gene_list,input_LFC_genesignature,by.x = "V1",by.y = "gene_name")
empty <- data.frame()  #concat all dataset together
for(i in seq(4, dim(gene_signature)[2])){
Value = gene_signature[,i]
sample_name = rep(colnames(gene_signature)[i],dim(gene_signature)[1])
logical_data = gene_signature$logical
dataframe_i <- data.frame(Value,sample_name,logical_data)
empty <- rbind(empty, dataframe_i)
print(dim(empty))
}
#df <- data.frame(LFC = LFC, KO_type =input_meta$KO_type)
my_comparisons <- list (c("postive weight","negative weight"))
empty <- empty[!is.na(empty$Value),]
p <- ggviolin(empty, x = "sample_name", y = "Value", fill = "logical_data",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
add = "boxplot", add.params = list(fill = "logical_data"),
title = "Positive and negative weight in all datasets",
xlab = "Datasets", ylab = "LFC_Value")+
stat_compare_means(comparisons = my_comparisons, label = "p.signif") +# Add significance levels
theme(plot.title = element_text(size = 20, face = "bold", hjust = 0.5,color = "#2F4F4F")) +
theme(axis.text.x.bottom = element_text(size = 7,face = "bold")) +
theme(axis.text.x.bottom = element_text(angle = 90,hjust=1)) +
#scale_x_discrete(position = "") +
theme(legend.position = "right") +
guides(fill = guide_legend(nrow = 3,byrow = T)) +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 10,face = "bold")) +
theme(axis.title.x = element_text(color = "#2F4F4F",face = "bold",size = 15)) +
theme(axis.title.y = element_text(color = "#2F4F4F",face = "bold",size = 15))
output_path = "/Users/yujijun/Documents/01-Work/05-CRESPR_SCREEN/crisprproject1/CRISPR_output_plot/Violinplot"
figure_name = paste("Violinplot of Positive and negative weight in all cohort",".png",sep = "")
png(paste(output_path,figure_name,sep = "/"),height = 15,width = 30,units ="cm",res=150)
print(p)
dev.off()
