verfied_gene = "Carm1"
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/Carm1_output"
#plot
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
file_path = all_file[1]
file_path
file_path = all_file_list[1]
file_path
dd.rra = ReadRRA(file_path)
head(dd.rra)
x = "carm1"
tpupper(x)
toupper(x)
x = "Carm1"
toupper(x)
%in%
?%in%
? %in%
document()
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = "Carm1"
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/Carm1_output"
#plot
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
is.vector(dd.rra$LFC)
x = c("a","b")
"a" %in% x
"c" %in% x
document()
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = "Carm1"
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/Carm1_output"
#plot
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
document()
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = "Carm1"
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/Carm1_output"
#plot
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = "Carm1"
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/Carm1_output"
#plot
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
document()
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = "Carm1"
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/Carm1_output"
#plot
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
x = c(x,y)
x = c("a","b")
"a" %in% x
c("a","b") %in% x
dd.rra$Official
"RP11-51F16.8" = RP11-51F16.8
"RP11-51F16.8" in dd.rra$Official
"RP11-51F16.8" %in% dd.rra$Official
"CARM1" %in% dd.rra$Official
document()
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = "Carm1"
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/Carm1_output"
#plot
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
i =1
all_file_list[i]
volcanodisplaysinglegene("/Users/yujijun/Documents/ImmuneScreens_verified/Burr_2017_Nature_28813417/test/PD-L1_CMTM6_INFr.gene_summary.txt",verfied_gene,figure_name[i],output_path)
file_path
head(dd.rra)
dd.rra$Official = toupper(dd.rra$Official)
verfied_gene %in% dd.rra$Official
"BCL3" %in% dd.rra$Official
"CARM1" %in% dd.rra$Official
dd.rra$LFC = dd.rra$LFC
dd.rra$color <- "non-verified"
dd.rra$log_10 <- -log10(dd.rra$FDR)
dd.rra$color[dd.rra$Official %in% verified_gene] <- "verified"
figure_title = figure_name
subset = dd.rra[dd.rra$Official %in% verified_gene,]
dd.rra$Official %in% "VARM1"
sum([dd.rra$Official %in% verified_gene] )
sum(dd.rra$Official %in% verified_gene)
dd.rra$Official %in% verfied_gene
sum(dd.rra$Official %in% verfied_gene)
sum(verfied_gene %in% dd.rra$Official)
document()
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = "Carm1"
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/Carm1_output"
#plot
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
file_path  = all_file_list[1]
file_paht
file_path = all_file_list[1]
file_open
file_path
#input data
dd.rra = ReadRRA(file_path)
head(dd.rra)
verfied_gene %in% dd.rra$Official
verfied_gene
verfied_gene = "CARM1"
verfied_gene %in% dd.rra$Official
dd.rra$LFC = dd.rra$LFC
dd.rra$color <- "non-verified"
dd.rra$log_10 <- -log10(dd.rra$FDR)
dd.rra$color[dd.rra$Official %in% verfied_gene] <- "verified"
figure_title = figure_name
subset = dd.rra[dd.rra$Official %in% verfied_gene,]
subset
dd.rra$Official %in% verfied_gene
sum(dd.rra$Official %in% verfied_gene)
#draw the plot
p<-Volcano(data=dd.rra, x="LFC",y="log_10",
label_data = subset,fill="color",
color="color",label = "Official",color_palette = c("grey","red"),title=figure_title)  #+ geom_text_repel(data = subset,aes(x = LFC, y = FDR),label = Official)
document()
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = "CARM1"
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/Carm1_output"
#plot
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
#plot
for(i in seq(1,length(all_file_list),1)[1:3]){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
document()
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = "CARM1"
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/Carm1_output"
#plot
for(i in seq(1,length(all_file_list),1)[1:3]){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = "CARM1"
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/Carm1_output"
#plot
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
read_excel("/Users/yujijun/Documents/ImmuneScreens_v2/Quanlity_control.xlsx",sheet = "sheet2")
read_excel("/Users/yujijun/Documents/ImmuneScreens_v2/Quanlity_control.xlsx",sheet = "Sheet2")
qc_matrix[,4]
qc_matrix = read_excel("/Users/yujijun/Documents/ImmuneScreens_v2/Quanlity_control.xlsx",sheet = "Sheet2")
folder_name = unique(qc_matrix[which(qc_matrix$PassQC == Y),"Dir_name"])
qc_matrix$PassQC
folder_name = unique(qc_matrix[which(qc_matrix$PassQC == "Y"),"Dir_name"])
folder_name
qc_matrix[which(qc_matrix$PassQC == "Y"),"Dir_name"]
folder_name = unique(qc_matrix[which(qc_matrix$PassQC == "Y"),"Dir_name"])
folder_name
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
qc_matrix = read_excel("/Users/yujijun/Documents/ImmuneScreens_v2/Quanlity_control.xlsx",sheet = "Sheet2")
folder_name = unique(qc_matrix[which(qc_matrix$PassQC == "Y"),"Dir_name"])
folder_name
author_name_choosed = tr_split_fixed(folder_name,"_",n=2)[,1]
author_name_choosed = str_split_fixed(folder_name,"_",n=2)[,1]
author_name_choosed = str_split_fixed(folder_name_choosed,"_",n=2)[,1]
qc_matrix = read_excel("/Users/yujijun/Documents/ImmuneScreens_v2/Quanlity_control.xlsx",sheet = "Sheet2")
folder_name_choosed = unique(qc_matrix[which(qc_matrix$PassQC == "Y"),"Dir_name"])
author_name_choosed = str_split_fixed(folder_name_choosed,"_",n=2)[,1]
folder_name_choosed
author_name_choosed = str_split_fixed(folder_name_choosed$Dir_name,"_",n=2)[,1]
all_file_list %in% author_name_choosed
basename(all_file_list),"[.]",n=2)[1]
str_split_fixed(basename(all_file_list),"[.]",n=2)
all_file
str_split_fixed(all_file,"_",n=2)
all_file_list[str_split_fixed(all_file,"_",n=2)[,1] %in% author_name_choosed]
length(all_file_list[str_split_fixed(all_file,"_",n=2)[,1] %in% author_name_choosed])
folder_name_choosed = unique(qc_matrix[which(qc_matrix$PassQC == "Y"),"Dir_name"])
folder_name_choosed
folder_name_choosed
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
length(all_file)
all_file
all_file = list.files(basic_path,pattern = "*/test/*.gene_summary.txt",recursive = T)
all_file
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
qc_matrix = read_excel("/Users/yujijun/Documents/ImmuneScreens_v2/Quanlity_control.xlsx",sheet = "Sheet2")
folder_name_choosed = unique(qc_matrix[which(qc_matrix$PassQC == "Y"),"Dir_name"])
author_name_choosed = str_split_fixed(folder_name_choosed$Dir_name,"_",n=2)[,1]
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
qc_matrix = read_excel("/Users/yujijun/Documents/ImmuneScreens_v2/Quanlity_control.xlsx",sheet = "Sheet2")
folder_name_choosed = unique(qc_matrix[which(qc_matrix$PassQC == "Y"),"Dir_name"])
author_name_choosed = str_split_fixed(folder_name_choosed$Dir_name,"_",n=2)[,1]
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
qc_matrix = read_excel("/Users/yujijun/Documents/ImmuneScreens_v2/Quanlity_control.xlsx",sheet = "Sheet2")
folder_name_choosed = unique(qc_matrix[which(qc_matrix$PassQC == "Y"),"Dir_name"])
author_name_choosed = str_split_fixed(folder_name_choosed$Dir_name,"_",n=2)[,1]
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = "CARM1"
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/Carm1_output"
#draw volcano plot for all verified
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaysinglegene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
####genelist####
genelist_freemam = c("Jak1","Jak2","Ifngr2","Tap1","Tap2","B2m","Ifngr1","Stat1")
library(crisprproject1)
####folder name####
Freeman_2019_CellRep_31509742
basic_path_1 <- "/Users/yujijun/Dropbox (Partners HealthCare)/ImmuneScreens"
basic_path <- "/Users/yujijun/Documents/ImmuneScreens_v2/"
specific_path <- "Freeman_2019_CellRep_31509742/test"
file_all = list.files(path = paste(basic_path,specific_path,sep = "/"))
file_choose = file_all[grepl("*.gene_summary.txt", file_all)]
file_choose
verified_gene= genelist_freemam#choose a gene list you would like to display
####display and save the plot with the function of volcanodisplayrep####
volcanodisplay(basic_path, specific_path, file_name, verified_gene, output_path)
file_choose[2]
file_name = file_choose[2] #choose the file you like
basic_path_1 <- "/Users/yujijun/Dropbox (Partners HealthCare)/ImmuneScreens"
basic_path <- "/Users/yujijun/Documents/ImmuneScreens_v2/"
specific_path <- "Freeman_2019_CellRep_31509742/test"
output_path = "/Users/yujijun/Desktop" #change the folder name
file_all = list.files(path = paste(basic_path,specific_path,sep = "/"))
file_choose = file_all[grepl("*.gene_summary.txt", file_all)]
file_name = file_choose[2] #choose the file you like
verified_gene= genelist_freemam#choose a gene list you would like to display
####display and save the plot with the function of volcanodisplayrep####
volcanodisplay(basic_path, specific_path, file_name, verified_gene, output_path)
x = c("a","b","c")
y = c("a","b")
y %in% x
sum(y %in% x)
document()
document()
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = c('Impdh2','Rasgrp2','Pdlim1','Klrb1c','Atp1b1','Eomes','Igfbp4','Pim2','Hmgn1','Id3','Rps2','Satb1','Acp5','Tubb5','Dapl1','Fam101b','S1pr1','Ly6c2','Nsg2','Ccr7','Ighm','Bcl2','Fcer1g','Lef1','Sell','Tcf7','Klf2')
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/liyejie_27list"
#draw volcano plot for all verified
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaymultigene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
toupper(c('Impdh2','Rasgrp2','Pdlim1','Klrb1c','Atp1b1',
'Eomes','Igfbp4','Pim2','Hmgn1','Id3','Rps2',
'Satb1','Acp5','Tubb5','Dapl1','Fam101b',
'S1pr1','Ly6c2','Nsg2','Ccr7','Ighm','Bcl2',
'Fcer1g','Lef1','Sell','Tcf7','Klf2'))
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
verfied_gene = toupper(c('Impdh2','Rasgrp2','Pdlim1','Klrb1c','Atp1b1',
'Eomes','Igfbp4','Pim2','Hmgn1','Id3','Rps2',
'Satb1','Acp5','Tubb5','Dapl1','Fam101b',
'S1pr1','Ly6c2','Nsg2','Ccr7','Ighm','Bcl2',
'Fcer1g','Lef1','Sell','Tcf7','Klf2'))
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/liyejie_27list"
#draw volcano plot for all verified
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaymultigene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
# --------------
# Date:  2019-11-12 09:11:53
# Author:JijunYu
# Email: jijunyu140@gmail.com
# --------------
# About project:This project is for Carm1 analysis
#
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
# #verfied_gene = toupper(c('Impdh2','Rasgrp2','Pdlim1','Klrb1c','Atp1b1',
#                          'Eomes','Igfbp4','Pim2','Hmgn1','Id3','Rps2',
#                          'Satb1','Acp5','Tubb5','Dapl1','Fam101b',
#                          'S1pr1','Ly6c2','Nsg2','Ccr7','Ighm','Bcl2',
#                          'Fcer1g','Lef1','Sell','Tcf7','Klf2'))
verfied_gene = toupper(c("Tcf7","Sell","Lef","Ccr7"))
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/liyejie_4list"
#draw volcano plot for all verified
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaymultigene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
require(stringi)
require(stringr)
library(crisprvarified)
#basic parameter
basic_path = "/Users/yujijun/Documents/ImmuneScreens_verified"
all_file = list.files(basic_path,pattern = "*.gene_summary.txt",recursive = T)
all_file_list = paste(basic_path, all_file,sep = "/")
author_name = str_split_fixed(all_file,"_",n=2)[,1]
control_treatment = str_split_fixed(basename(all_file),"[.]",n=2)[,1]
figure_name = paste(author_name, control_treatment,sep = "_")
# #verfied_gene = toupper(c('Impdh2','Rasgrp2','Pdlim1','Klrb1c','Atp1b1',
#                          'Eomes','Igfbp4','Pim2','Hmgn1','Id3','Rps2',
#                          'Satb1','Acp5','Tubb5','Dapl1','Fam101b',
#                          'S1pr1','Ly6c2','Nsg2','Ccr7','Ighm','Bcl2',
#                          'Fcer1g','Lef1','Sell','Tcf7','Klf2'))
#verfied_gene = toupper(c("Tcf7","Sell","Lef","Ccr7"))
verfied_gene = toupper(c("Lgals3","Rgs16","Cd8a","Tigit","Nkg7","S100a4","Klrc1","Cxcr6","Pdcd1","Id2","Capg","Gzmb","Lag3","Tnfrsf9","Lgals1","Gzma","Ccl3","S100a6","Ccl4"))
output_path = "/Users/yujijun/Documents/ImmuneScreens_QCoutput/liyejie_neglist"
#draw volcano plot for all verified
for(i in seq(1,length(all_file_list),1)){
print(figure_name[i])
volcanodisplaymultigene(all_file_list[i],verfied_gene,figure_name[i],output_path)
}
dim(mtcars)
head(mtcars)
library(dplyr)
head(mtcars)
library(dplyr)
mtcars %>% group_by(cyl) %>%
summarise(n=n())
mtcars %>% filter(Valiant,Datsun 710)
mtcars %>% filter(Valiant)
?filter
mtcars %>% filter(cyl==6)
mtcars %>% filter(cyl==6 & hp ==110) # you can use filter to choose the matrix meeting the conditions
mtcars %>% filter(cyl==6 & hp ==110 & wt == 2.62) # you can use filter to choose the matrix meeting the conditions
near(sqrt(2) ^ 2, 2)
mtcars %>% filter(cyl==6 & hp ==110 & near(wt,2.62)) # you can use filter to choose the matrix meeting the conditions
?distanct
?distinct
df <- tibble(
x = sample(10, 100, rep = TRUE),
y = sample(10, 100, rep = TRUE)
)
df
nrow(distinct(df,x))
nrow(distinct(df,x,y))
nrow(distinct(df,y))
distinct(df, diff = abs(x - y))
#sample frac
sample_frac(mtcars,5, replace = T)
#sample frac
sample_frac(mtcars,0.1, replace = T)
dim(mtcars)
#sample frac
sample_frac(mtcars,0.1, replace = T) #choose
#select rows by postion
slice(mtcars,2:4)
head(mtcars)
#select and order top n entries
top_n(mtcars,5, disp)
top_frac(mtcars,0.15, qsec)
unique(mtcars$carb)
df %>% filter(carb %in% c(1,2))
#sample frac
sample_frac(mtcars,0.1, replace = T) #choose based on fraction
carb %in% c(1,2)
mtcars %>% filter(carb %in% c(1,2))
xor()
/xor
/xor()
?xor()
#
mtcars %>% filter(xor(vs,am))
